<Application xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:FluentAvaloniaSamples"
             x:Class="FluentAvaloniaSamples.App"
             xmlns:ui="using:FluentAvalonia.UI.Controls"
             xmlns:sty="using:FluentAvalonia.Styling"
			 xmlns:wnd="using:FluentAvaloniaSamples.Views.Internal"
			 xmlns:avaloniaEdit="https://github.com/avaloniaui/avaloniaedit">
    <Application.Resources>
        <ui:SymbolIconSource x:Key="SaveIcon" Symbol="Save" />
        <ui:FontIconSource x:Key="FontIcon" Glyph="F" />
        <ui:PathIconSource x:Key="PathIcon" Data="M0,0 L 50,0 L 25,50Z" />
        <ui:BitmapIconSource x:Key="BmpIcon" UriSource="avares://FluentAvaloniaSamples/Assets/avalonia-logo.ico" />

		<!-- Override this -->
		<Thickness x:Key="NavigationViewContentMargin">0,48,0,0</Thickness>
    </Application.Resources>

    <Application.Styles>
        <sty:FluentAvaloniaTheme />

        <StyleInclude Source="avares://AvaloniaEdit/AvaloniaEdit.xaml" />
        
        <Style Selector="local|ControlExample">
            <Setter Property="Template">
                <ControlTemplate>
                    <StackPanel>                        
                        <ContentPresenter Name="HeaderPresenter"
                                          Content="{TemplateBinding Header}"
                                          ContentTemplate="{TemplateBinding HeaderTemplate}"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Center"
                                          HorizontalContentAlignment="Stretch"
                                          VerticalContentAlignment="Stretch"
                                          TextBlock.FontSize="18"
                                          TextBlock.FontWeight="Bold"
                                          Margin="0 16"/>

                        <Border BorderBrush="{DynamicResource ControlStrokeColorDefaultBrush}"
                                BorderThickness="1"
								Background="{DynamicResource SolidBackgroundFillColorBaseBrush}"
								CornerRadius="4 4 0 0">
                            <DockPanel>
                                <ContentPresenter Name="OptionPresenter"
                                                  IsVisible="{Binding Options, Converter={x:Static ObjectConverters.IsNotNull}}"
                                                  Content="{TemplateBinding Options}"
                                                  DockPanel.Dock="Right"
                                                  VerticalAlignment="Stretch"
                                                  HorizontalContentAlignment="Stretch"
                                                  VerticalContentAlignment="Stretch"
												  Background="{DynamicResource CardBackgroundFillColorDefaultBrush}"
                                                  Margin="12"
												  CornerRadius="8" />                                
                                
                                <ContentPresenter Name="ExamplePresenter"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              HorizontalAlignment="Stretch"
                                              VerticalAlignment="Stretch"
                                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Padding="12"/>
                            </DockPanel>
                        </Border>

						<Border BorderBrush="{DynamicResource ControlStrokeColorDefaultBrush}"
								BorderThickness="1 0 1 1"
								Background="{DynamicResource SolidBackgroundFillColorTertiaryBrush}"
								CornerRadius="0 0 4 4"
								MinHeight="10">
							<StackPanel>
								<Border IsVisible="{TemplateBinding XamlSource, Converter={x:Static StringConverters.IsNotNullOrEmpty}}">
									<DockPanel>
										<TextBlock Text="Xaml" FontWeight="700" HorizontalAlignment="Left"
												   VerticalAlignment="Top" DockPanel.Dock="Top" />
										<!-- <ContentPresenter Name="XamlSourcePresenter" -->
										<!-- 			 Content="{TemplateBinding XamlSource}" -->
										<!-- 			 HorizontalAlignment="Left" -->
										<!-- 			 VerticalAlignment="Top" -->
										<!-- 			 HorizontalContentAlignment="Left" -->
										<!-- 			 VerticalContentAlignment="Top" -->
										<!-- 			 Padding="16,20"> -->
										<!-- 	<ContentPresenter.Styles> -->
										<!-- 		<Style Selector="TextBlock"> -->
										<!-- 			<Setter Property="TextWrapping" Value="Wrap" /> -->
										<!-- 		</Style> -->
										<!-- 	</ContentPresenter.Styles> -->
										<!-- </ContentPresenter> -->
										<avaloniaEdit:TextEditor x:Name="PART_XamlPreviewer" 
										                         IsReadOnly="True"
										                         HorizontalAlignment="Left"
										                         VerticalAlignment="Top"
										                         Padding="16,20"
										                         MinHeight="50"
										                         SyntaxHighlighting="XML"/>
									</DockPanel>
								</Border>

								<Border IsVisible="{TemplateBinding CSharpSource, Converter={x:Static StringConverters.IsNotNullOrEmpty}}">
									<DockPanel>
										<TextBlock Text="C#" FontWeight="700" HorizontalAlignment="Left"
												   VerticalAlignment="Top" DockPanel.Dock="Top" />
										<ContentPresenter Name="CSharpSourcePresenter"
													  Content="{TemplateBinding CSharpSource}"
													  HorizontalAlignment="Left"
													  VerticalAlignment="Top"
													  HorizontalContentAlignment="Left"
													  VerticalContentAlignment="Top"
													  Padding="4 5">
											<ContentPresenter.Styles>
												<Style Selector="TextBlock">
													<Setter Property="TextWrapping" Value="Wrap" />
												</Style>
											</ContentPresenter.Styles>
										</ContentPresenter>
									</DockPanel>

								</Border>

								<Border IsVisible="{TemplateBinding UsageNotes, Converter={x:Static StringConverters.IsNotNullOrEmpty}}">
									<DockPanel>
										<TextBlock Text="Usage Notes" FontStyle="Italic"
												   FontWeight="SemiBold" HorizontalAlignment="Left"
												   VerticalAlignment="Top" DockPanel.Dock="Top" Margin="3" />
										<ContentPresenter Name="UsageNotesPresenter"
													  Content="{TemplateBinding UsageNotes}"
													  HorizontalAlignment="Left"
													  VerticalAlignment="Top"
													  HorizontalContentAlignment="Stretch"
													  VerticalContentAlignment="Stretch"
													  Padding="4 5">
											<ContentPresenter.Styles>
												<Style Selector="TextBlock">
													<Setter Property="TextWrapping" Value="Wrap" />
												</Style>
											</ContentPresenter.Styles>
										</ContentPresenter>
									</DockPanel>
								</Border>

								<Border Name="DocsView"
										IsVisible="{TemplateBinding ShowDocs}">
									<Border.Styles>
										<Style Selector="ToggleButton.ExpanderToggleButton">
											<Setter Property="Background" Value="Transparent" />
											<Setter Property="BorderBrush" Value="Transparent" />
											<Setter Property="BorderThickness" Value="0" />
											<Setter Property="Padding" Value="{DynamicResource ButtonPadding}" />
											<Setter Property="Template">
												<ControlTemplate>
													<Border Background="{TemplateBinding Background}"
															BorderBrush="{TemplateBinding BorderBrush}"
															BorderThickness="{TemplateBinding BorderThickness}"
															Name="LayoutRoot">
														<DockPanel>
															<ui:SymbolIcon Symbol="ChevronDown"
																		   DockPanel.Dock="Right"
																		   FontSize="18"
																		   Margin="10 6" />

															<ContentPresenter Content="{TemplateBinding Content}"
																			  ContentTemplate="{TemplateBinding ContentTemplate}"
																			  Margin="{TemplateBinding Padding}"/>
														</DockPanel>
													</Border>

												</ControlTemplate>
											</Setter>
										</Style>
										<Style Selector="ToggleButton.ExpanderToggleButton:pointerover /template/ Border">
											<Setter Property="Background" Value="{DynamicResource ButtonBackgroundPointerOver}" />
										</Style>
										<Style Selector="ToggleButton.ExpanderToggleButton:pressed /template/ Border">
											<Setter Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
										</Style>
										<Style Selector="ToggleButton.ExpanderToggleButton:checked /template/ ui|SymbolIcon">
											<Setter Property="RenderTransform" Value="rotate(180deg)" />
										</Style>

										<Style Selector="Expander[ExpandDirection=Down]">
											<Setter Property="Background" Value="Transparent" />
											<Setter Property="BorderThickness" Value="{DynamicResource ExpanderContentDownBorderThickness}" />
											<Setter Property="MinWidth" Value="0" />
											<Setter Property="MinHeight" Value="0" />
											<Setter Property="Template">
												<ControlTemplate>
													<DockPanel>
														<ToggleButton Name="PART_toggle"
																		  MinHeight="{TemplateBinding MinHeight}"
																		  IsEnabled="{TemplateBinding IsEnabled}"
																		  HorizontalAlignment="Stretch"
																		  IsChecked="{TemplateBinding IsExpanded, Mode=TwoWay}"
																		  Content="{TemplateBinding Header}"
																		  Classes="ExpanderToggleButton"
																		  DockPanel.Dock="Top"
                                                                    />

														<Border Name="ExpanderContent"
																Background="{TemplateBinding Background}"
																BorderBrush="{TemplateBinding BorderBrush}"
																BorderThickness="{TemplateBinding BorderThickness}"
																MinHeight="{TemplateBinding MinHeight}"
																MinWidth="{TemplateBinding MinWidth}">
															<ContentPresenter Name="PART_ContentPresenter"
																			  Margin="{TemplateBinding Padding}"
																		  IsVisible="{TemplateBinding IsExpanded}"
																		  ContentTemplate="{TemplateBinding ContentTemplate}"
																		  Content="{TemplateBinding Content}"
																		  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
																		  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                                   />
														</Border>

													</DockPanel>
												</ControlTemplate>
											</Setter>
										</Style>
									</Border.Styles>
									<DockPanel>
										<Expander Header="Definition">
											<ItemsRepeater Name="DocsItemsControl">
												<ItemsRepeater.ItemTemplate>
													<local:DocTypeTemplateSelector>
														<DataTemplate DataType="local:PropertyItemViewModel">
															<StackPanel Orientation="Horizontal">
																<TextBlock Text="{Binding Type, StringFormat='{}{0} '}" Foreground="#4EC999" />
																<TextBlock Text="{Binding Name, StringFormat='{}{0} '}" />
																<TextBlock Text="{}{" />
																<TextBlock Text=" get;" IsVisible="{Binding CanRead}" Foreground="Blue" />
																<TextBlock Text=" set;" IsVisible="{Binding CanWrite}" Foreground="Blue" />
																<TextBlock Text=" }" />
															</StackPanel>
														</DataTemplate>
														<DataTemplate DataType="local:MethodItemViewModel">
															<StackPanel Orientation="Horizontal">
																<TextBlock Text="{Binding Type, StringFormat='{}{0} '}" Foreground="#4EC999" />
																<TextBlock Text="abstract" IsVisible="{Binding IsAbstract}" Foreground="#4EC999" />
																<TextBlock Text="{Binding Name, StringFormat='{}{0}( '}" />
																<ItemsControl Items="{Binding Params}">
																	<ItemsControl.ItemsPanel>
																		<ItemsPanelTemplate>
																			<StackPanel Orientation="Horizontal" />
																		</ItemsPanelTemplate>
																	</ItemsControl.ItemsPanel>
																	<ItemsControl.ItemTemplate>
																		<DataTemplate>
																			<StackPanel Orientation="Horizontal">
																				<TextBlock Text="{Binding Type, StringFormat='{}{0} '}" Foreground="#4EC999" />
																				<TextBlock Text="{Binding Name, StringFormat='{}{0} '}" />
																				<TextBlock Text="{Binding DefaultValue, StringFormat='= {0} '}" IsVisible="{Binding IsOptional}" />
																			</StackPanel>
																		</DataTemplate>
																	</ItemsControl.ItemTemplate>
																</ItemsControl>
																<TextBlock Text=")" Foreground="#4EC999" />
															</StackPanel>
														</DataTemplate>
														<DataTemplate DataType="local:ClassItemViewModel">
															<ItemsControl Items="{Binding InheritChain}" Margin="0 10">
																<ItemsControl.ItemsPanel>
																	<ItemsPanelTemplate>
																		<WrapPanel Orientation="Horizontal" />
																	</ItemsPanelTemplate>
																</ItemsControl.ItemsPanel>
																<ItemsControl.ItemTemplate>
																	<DataTemplate>
																		<TextBlock Text="{Binding}" Foreground="#4EC999" />
																	</DataTemplate>
																</ItemsControl.ItemTemplate>
															</ItemsControl>
														</DataTemplate>
														<DataTemplate DataType="local:EventItemViewModel">
															<StackPanel Orientation="Horizontal">
																<TextBlock Text="event " Foreground="#4EC999" />
																<TextBlock Text="{Binding Type, StringFormat='{}{0} '}" Foreground="#4EC999" />
																<TextBlock Text="{Binding Name, StringFormat='{}{0} '}" />
															</StackPanel>
														</DataTemplate>
													</local:DocTypeTemplateSelector>
												</ItemsRepeater.ItemTemplate>
											</ItemsRepeater>
										</Expander>
									</DockPanel>
								</Border>
							</StackPanel>
						</Border>
					</StackPanel>
                </ControlTemplate>
            </Setter>
        </Style>


		<!-- All Related to the Custom Window Frame stuff for the Sample App, not intended for outside use -->
		
		<Style Selector="Button.SystemCaption">
			<Setter Property="Background" Value="Transparent" />
			<Setter Property="BorderBrush" Value="{x:Null}" />
			<Setter Property="BorderThickness" Value="0" />
			<Setter Property="Width" Value="46" />
			<Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
			<Setter Property="VerticalAlignment" Value="Stretch" />
			<Setter Property="FontFamily" Value="{StaticResource SymbolThemeFontFamily}" />
			<Setter Property="FontSize" Value="14" />
			<Setter Property="Template">
				<ControlTemplate>
					<Border Background="{TemplateBinding Background}" UseLayoutRounding="False">
						<TextBlock FontFamily="{TemplateBinding FontFamily}"
								   VerticalAlignment="Center"
								   HorizontalAlignment="Center"
									 Text="{TemplateBinding Content}"
									   UseLayoutRounding="True"/>
					</Border>
				</ControlTemplate>
			</Setter>
		</Style>
		<Style Selector="Button.SystemCaption:pointerover /template/ Border">
			<Setter Property="Background" Value="{DynamicResource SubtleFillColorSecondaryBrush}" />
		</Style>
		<Style Selector="wnd|CoreWindow[IsActive=False] Button.SystemCaption:pointerover /template/ Border">
			<Setter Property="Background" Value="{DynamicResource SubtleFillColorSecondaryBrush}" />
		</Style>

		<Style Selector="Button.SystemCaption:pressed /template/ Border">
			<Setter Property="Background" Value="{DynamicResource SubtleFillColorTertiaryBrush}" />
		</Style>
		<Style Selector="wnd|CoreWindow[IsActive=False] Button.SystemCaption:pressed /template/ Border">
			<Setter Property="Background" Value="{DynamicResource SubtleFillColorTertiaryBrush}" />
		</Style>

		<Style Selector="Button.SystemCaption:pressed /template/ ui|FontIcon">
			<Setter Property="Foreground" Value="{DynamicResource TextFillColorSecondaryBrush}" />
		</Style>

		<!-- Close Button -->
		<Style Selector="Button.SystemCaption.Close:pointerover /template/ Border">
			<Setter Property="Background" Value="#e81123" />
		</Style>
		<Style Selector="Button.SystemCaption.Close:pointerover /template/ ui|FontIcon">
			<Setter Property="Foreground" Value="White" />
		</Style>
		<Style Selector="Button.SystemCaption.Close:pressed /template/ Border">
			<Setter Property="Background" Value="#f1707a" />
		</Style>
		<Style Selector="Button.SystemCaption.Close:pressed /template/ ui|FontIcon">
			<Setter Property="Foreground" Value="White" />
		</Style>

		<Style Selector="local|MinMaxCloseControl">
			<Setter Property="Height" Value="32" />
			<Setter Property="Template">
				<ControlTemplate>
					<StackPanel Orientation="Horizontal">
						<Button Name="MinimizeButton"
								Classes="SystemCaption"  />
						<Button Name="MaxRestoreButton"
								Classes="SystemCaption" />
						<Button Name="CloseButton"
								Classes="SystemCaption Close"  />
					</StackPanel>
				</ControlTemplate>
			</Setter>
		</Style>
		<Style Selector="local|MinMaxCloseControl /template/ Button#MinimizeButton">
			<Setter Property="Content" Value="&#xE921;" />
		</Style>
		<Style Selector="local|MinMaxCloseControl /template/ Button#MaxRestoreButton">
			<Setter Property="Content" Value="&#xE15B;" />
		</Style>
		<Style Selector="local|MinMaxCloseControl:maximized /template/ Button#MaxRestoreButton">
			<Setter Property="Content" Value="&#xE923;" />
			<!-- Icon seems a little too small, so we'll up the font size here to make it look more correct -->
			<Setter Property="FontSize" Value="16" />
		</Style>
		<Style Selector="local|MinMaxCloseControl /template/ Button#CloseButton">
			<Setter Property="Content" Value="&#xE8BB;" />
		</Style>

		<Style Selector="wnd|CoreWindow[IsActive=False] local|MinMaxCloseControl /template/ Button">
			<Setter Property="Foreground" Value="#858585" />
		</Style>


		<Style Selector="Window:windows">			
			<Setter Property="TransparencyBackgroundFallback" Value="{DynamicResource ApplicationPageBackgroundThemeBrush}" />
			<Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}"/>
			<Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}"/>
			<Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
			<Setter Property="Template">
				<ControlTemplate>
					<VisualLayerManager>
						<!-- Because we use the System Border, we don't specify anything like that here.-->
						<Border Background="{TemplateBinding Background}"
								Padding="{TemplateBinding Padding}"
								Name="RootBorder">
							<Panel>
								<Panel Name="DefaultTitleBar"
									   Background="Transparent"
									   Height="32"
									   VerticalAlignment="Top">
									<TextBlock Name="TitleText"
											   Text="{TemplateBinding Title}"
											   Margin="70 0 0 0"
											   FontSize="12"
											   VerticalAlignment="Center"
											   HorizontalAlignment="Left" />
								</Panel>

								<ContentPresenter Name="PART_ContentPresenter"
												  ClipToBounds="False"
												  Margin="0 0 0 0"
												  HorizontalAlignment="Stretch"
												  VerticalAlignment="Stretch"
												  Content="{TemplateBinding Content}"
												  ContentTemplate="{TemplateBinding ContentTemplate}" />

								<!-- Add the Caption Buttons, these should ALWAYS overlay the window -->
								<local:MinMaxCloseControl HorizontalAlignment="Right"
														VerticalAlignment="Top"
														Name="SystemCaptionButtons"/>

							</Panel>
						</Border>
					</VisualLayerManager>
				</ControlTemplate>
			</Setter>
		</Style>
		<Style Selector="Window:windows:windows11">
			<Setter Property="Background">
				<SolidColorBrush Color="{DynamicResource SolidBackgroundFillColorTertiary}" Opacity="0.945" />
			</Setter>
		</Style>
		<!-- Windows 10 doesn't have Mica, so we use a solid background color, which matches what WinUI does too -->
		<Style Selector="Window:windows:windows10">
			<Setter Property="Background" Value="{DynamicResource ApplicationPageBackgroundThemeBrush}" />
		</Style>
		<!-- 
		Windows 10 is really a pain in the ass with custom window frames
		For whatever reason, the top border of the window frame hides under WinUI Comp, so we have to 
		fake it or else it looks weird. This isn't perfect, but better than nothing
		-->
		<Style Selector="Window:windows:windows10 /template/ Border#RootBorder">
			<!-- This will show if custom accent color setting is used in Settings page-->
			<Setter Property="BorderBrush" Value="{DynamicResource SystemAccentColor}" />
			<Setter Property="BorderThickness" Value="0 0.5 0 0" />
		</Style>
		<Style Selector="Window[IsActive=False]:windows:windows10 /template/ Border#RootBorder">
			<Setter Property="BorderBrush" Value="{DynamicResource CardStrokeColorDefaultSolid}" />
			<Setter Property="BorderThickness" Value="0 0.5 0 0" />
		</Style>
		<Style Selector="Window[WindowState=Maximized]:windows:windows10 /template/ Border#RootBorder">
			<Setter Property="BorderThickness" Value="0 0 0 0" />
		</Style>

		<Style Selector="wnd|CoreWindow:windows:extended /template/ TextBlock#TitleText">
			<Setter Property="IsVisible" Value="False" />
		</Style>
		<Style Selector="wnd|CoreWindow:windows:extended:customtitlebar /template/ Panel#DefaultTitleBar">
			<Setter Property="HorizontalAlignment" Value="Right" />
			<Setter Property="Width" Value="10" />
		</Style>
		
		
    </Application.Styles>

</Application>
